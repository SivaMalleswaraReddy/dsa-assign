/**
 * Class to represent a node of the linked list
 */
class Node
{
    public $data;
    public $next;

    public function __construct($item)
    {
        $this->data = $item;
        $this->next = null;
    }
}

/**
 * Class to represent a linked list
 */
class MyLinkedList
{
    public $head = null; // instance variable

    private static $count = 0; // static variable

    /**
     * Getter function for count of nodes
     *
     * @return int
     */
    public function getCount()
    {
        return self::$count;
    }

    /**
     * Insertion at the beginning of the linked list
     *
     * @param mixed $newItem
     * @return void
     */
    public function insertAtFirst($newItem)
    {
        if ($this->head === null) { // if the linked list is empty
            $this->head = new Node($newItem);
        } else { // when the linked list is non-empty
            $temp = new Node($newItem);
            $temp->next = $this->head;
            $this->head = $temp;
        }

        self::$count++;
    }

    public function insertAtLast($newItem)
    {
        if ($this->head === null) { // if the linked list is empty
            $this->head = new Node($newItem);
        } else { // when the linked list is non-empty
            $current = $this->head;

            while ($current->next != null) {
                $current = $current->next;
            } // after while loop terminates, current points to the last Node

            $current->next = new Node($newItem);
        }

        self::$count++;
    }

    public function delete($item)
    {
        $current = $previous = $this->head;

        while ($current->data != $item) {
            $previous = $current;
            $current = $current->next;
        }

// if you are deleting the first node of the linked list
        if ($current == $previous) {
            $this->head = $current->next;
        }

        $previous->next = $current->next;

        self::$count--;
    }

    public function printList()
    {
        $items = [];
        $current = $this->head;
        while ($current != null) {
            array_push($items, $current->data);
            $current = $current->next;
        }

        $str = '';
        foreach ($items as $item) {
            $str .= $item . '->';
        }

        echo $str;
        echo PHP_EOL;
    }
}

$my_list = new MyLinkedList();

$my_list->insertAtFirst(20);
$my_list->insertAtLast(40);
$my_list->printList();


 Queue::Queue ::Queue:queue


02:21 PM

to Everyone
<?php
class Queue
{
protected $queue;
protected $front;
protected $rear;
protected $capacity;

public function __construct($capacity = 5)
{
// initialize the queue with an empty array
$this->queue = array();

// queue can only contain this many elements
$this->capacity = $capacity;

// initialize front and rear to -1
$this->front = -1;
$this->rear = -1;
}

public function enqueue($element)
{
if ($this->rear == $this->capacity) {
print("Queue is full!!!\n");
} else {
// when the queue is empty
if ($this->front == -1) {
// initialization required for first queue element
$this->front = $this->rear = 0;
}
$this->queue[$this->rear] = $element;
$this->rear++;
}
}

public function dequeue()
{
if ($this->front == $this->rear) {
print("Queue is empty!!!\n");
} else {
if ($this->rear - $this->front == 1) {
$this->front = $this->rear = -1;
} else {
$this->rear--;
}
return array_shift($this->queue);
}
}

public function peek()
{
return $this->queue[$this->front];
}

public function printQueue()
{
print_r($this->queue);
}
}

$queue = new Queue(3);
$queue->enqueue(10);
$queue->enqueue(20);
$queue->enqueue(30);
$queue->printQueue();
print("Dequeued element: " . $queue->dequeue() . "\n");
$queue->printQueue();
$queue->enqueue(40);
$queue->enqueue(50);

Recursion: #####


<?php

/**
* Function calling itself recursively
*
* @return void
*/
function recursive_func()
{
static $counter = 0;
$counter++;
print("Recursive function call number " . $counter . "\n");
if ($counter < 3) {
recursive_func();
}
print("Bye from recursive_func, call number " . $counter . "
");
$counter--;
}

// Main function call
print("Execution of main function started\n");
recursive_func();
print("Execution of main function over\n");